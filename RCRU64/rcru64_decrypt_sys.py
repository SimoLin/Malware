import sys
import io
import os
import base64
from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP
from Crypto.Hash import SHA1


CHUNK_DELIM = b'$'


def rsa_decrypt(enc_data: bytes, priv_key_data: bytes) -> bytes:
    """RSA OAEP decrypt data"""

    key = RSA.import_key(priv_key_data)
    decryptor = PKCS1_OAEP.new(key, hashAlgo=SHA1)

    try:
        return decryptor.decrypt(enc_data)
    except ValueError:
        return None


#
# Main
#
if len(sys.argv) != 2:
    print('Usage:', os.path.basename(sys.argv[0]), 'filename')
    sys.exit(0)

filename = sys.argv[1]

with io.open('rsa_privkey1.txt', 'rb') as f:
    priv_key_data = base64.b64decode(f.read())

with io.open(filename, 'rb') as f:
    enc_data = f.read()

enc_data_chunks = sorted(list(filter(None, enc_data.split(CHUNK_DELIM))),
                         key = lambda chunk: chunk[0])

data = b''

for i, enc_data_chunk in enumerate(enc_data_chunks):

    data_chunk = rsa_decrypt(base64.b64decode(enc_data_chunk[1:]),
                             priv_key_data)
    if data_chunk is None:
        print('Error: Failed to decrypt data chunk #%d' % i)
        break

    data += data_chunk

new_filename = filename + '.dec'
with io.open(new_filename, 'wb') as f:
    f.write(data)
